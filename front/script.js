const API_BASE = 'http://localhost:3000/api/auth';
let currentToken = localStorage.getItem('jwt_token') || '';

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const resultsDiv = document.getElementById('results');
const tokenDisplay = document.getElementById('tokenDisplay');
const userInfo = document.getElementById('userInfo');
const userData = document.getElementById('userData');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    updateTokenDisplay();
    if (currentToken) {
        getCurrentUser();
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
document.getElementById('registerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const userData = {
        username: document.getElementById('regUsername').value,
        email: document.getElementById('regEmail').value,
        password: document.getElementById('regPassword').value
    };

    try {
        showResult('‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'info');
        
        const response = await fetch(`${API_BASE}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        });

        const data = await response.json();
        
        if (response.ok) {
            showResult('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success');
            currentToken = data.token;
            saveToken();
            showUserInfo(data.user);
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`, 'error');
        }
    } catch (error) {
        showResult('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    }
});

// –í—Ö–æ–¥
document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const credentials = {
        email: document.getElementById('loginEmail').value,
        password: document.getElementById('loginPassword').value
    };

    try {
        showResult('‚è≥ –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É...', 'info');
        
        const response = await fetch(`${API_BASE}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(credentials)
        });

        const data = await response.json();
        
        if (response.ok) {
            showResult('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
            currentToken = data.token;
            saveToken();
            showUserInfo(data.user);
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`, 'error');
        }
    } catch (error) {
        showResult('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUser() {
    if (!currentToken) return;

    try {
        const response = await fetch(`${API_BASE}/me`, {
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });

        if (response.ok) {
            const data = await response.json();
            showUserInfo(data.user);
        } else {
            logout();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
async function getProtectedData() {
    if (!currentToken) {
        showResult('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
        return;
    }

    try {
        showResult('‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...', 'info');
        
        const response = await fetch('http://localhost:3000/api/protected', {
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });

        const data = await response.json();
        
        if (response.ok) {
            showResult('‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n' + JSON.stringify(data, null, 2), 'success');
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`, 'error');
        }
    } catch (error) {
        showResult('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
async function refreshToken() {
    if (!currentToken) {
        showResult('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
        return;
    }

    try {
        showResult('‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...', 'info');
        
        const response = await fetch(`${API_BASE}/refresh`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${currentToken}`
            }
        });

        const data = await response.json();
        
        if (response.ok) {
            showResult('‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
            currentToken = data.token;
            saveToken();
        } else {
            showResult(`‚ùå –û—à–∏–±–∫–∞: ${data.message}`, 'error');
        }
    } catch (error) {
        showResult('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
    }
}

// –í—ã–π—Ç–∏
function logout() {
    currentToken = '';
    saveToken();
    userInfo.style.display = 'none';
    showResult('üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'info');
}

// –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
function copyToken() {
    if (!currentToken) {
        showResult('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
        return;
    }

    navigator.clipboard.writeText(currentToken)
        .then(() => showResult('‚úÖ –¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success'))
        .catch(() => showResult('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω', 'error'));
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showResult(message, type) {
    resultsDiv.innerHTML = `<div class="${type}">${message}</div>`;
}

function updateTokenDisplay() {
    tokenDisplay.value = currentToken;
}

function saveToken() {
    localStorage.setItem('jwt_token', currentToken);
    updateTokenDisplay();
}

function showUserInfo(user) {
    userData.innerHTML = `
        <strong>ID:</strong> ${user.id}<br>
        <strong>Username:</strong> ${user.username}<br>
        <strong>Email:</strong> ${user.email}<br>
        <strong>Created:</strong> ${new Date(user.createdAt).toLocaleString()}
    `;
    userInfo.style.display = 'block';
}