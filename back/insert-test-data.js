// insert-test-data.js
require('dotenv').config();
const { Pool } = require('pg');
const bcrypt = require('bcryptjs');

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
});

async function insertTestData() {
    const client = await pool.connect();
    
    try {
        console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('BEGIN');

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
        const saltRounds = 10;
        const password1 = await bcrypt.hash('password123', saltRounds);
        const password2 = await bcrypt.hash('testpass456', saltRounds);
        const password3 = await bcrypt.hash('admin789', saltRounds);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
        
        const users = [
            {
                username: 'john_doe',
                email: 'john@example.com',
                password: password1
            },
            {
                username: 'jane_smith',
                email: 'jane@example.com',
                password: password2
            },
            {
                username: 'admin_user',
                email: 'admin@example.com',
                password: password3
            }
        ];

        for (const user of users) {
            const result = await client.query(
                `INSERT INTO users (username, email, password) 
                 VALUES ($1, $2, $3) 
                 ON CONFLICT (email) DO NOTHING 
                 RETURNING id, username, email, created_at`,
                [user.username, user.email, user.password]
            );
            
            if (result.rows.length > 0) {
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (${user.email})`);
            } else {
                console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${user.email}`);
            }
        }

        // –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await client.query('COMMIT');
        console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const allUsers = await client.query('SELECT id, username, email, created_at FROM users');
        console.log('\nüìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:');
        console.table(allUsers.rows);

    } catch (error) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
insertTestData();