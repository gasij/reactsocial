// simple-server-http.js - —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
require('dotenv').config();
const http = require('http');

const server = http.createServer((req, res) => {
    // Set CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Requested-With');
    
    // Handle preflight requests
    if (req.method === 'OPTIONS') {
        console.log('‚úÖ Preflight request handled');
        res.writeHead(200);
        res.end();
        return;
    }
    
    // Parse URL
    const url = req.url;
    const method = req.method;
    
    console.log(`üì® ${method} ${url}`, req.headers);

    // Health check
    if (url === '/api/health' && method === 'GET') {
        console.log('‚úÖ Health check passed');
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
            status: 'OK', 
            message: 'HTTP Server is running!',
            timestamp: new Date().toISOString()
        }));
        return;
    }
    
    // Handle POST requests
    if (method === 'POST') {
        let body = '';
        
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', () => {
            try {
                const data = body ? JSON.parse(body) : {};
                console.log('üì¶ Request body:', data);

                if (url === '/api/auth/register') {
                    console.log('üë§ Registration attempt:', data.email);
                    
                    if (!data.username || !data.email || !data.password) {
                        res.writeHead(400, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ 
                            message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã: username, email, password' 
                        }));
                        return;
                    }
                    
                    res.writeHead(201, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!',
                        user: {
                            id: Math.floor(Math.random() * 1000),
                            username: data.username,
                            email: data.email,
                            createdAt: new Date().toISOString()
                        },
                        token: 'test-jwt-token-' + Math.random().toString(36).substr(2)
                    }));
                    return;
                }
                
                if (url === '/api/auth/login') {
                    console.log('üîê Login attempt:', data.email);
                    
                    if (!data.email || !data.password) {
                        res.writeHead(400, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ 
                            message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
                        }));
                        return;
                    }
                    
                    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∞)
                    if (data.password.length < 6) {
                        res.writeHead(401, { 'Content-Type': 'application/json' });
                        res.end(JSON.stringify({ 
                            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' 
                        }));
                        return;
                    }
                    
                    res.writeHead(200, { 'Content-Type': 'application/json' });
                    res.end(JSON.stringify({
                        message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!',
                        user: {
                            id: 1,
                            username: data.email.split('@')[0],
                            email: data.email,
                            createdAt: new Date().toISOString()
                        },
                        token: 'test-jwt-token-' + Math.random().toString(36).substr(2)
                    }));
                    return;
                }
                
                // Unknown POST route
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: 'Route not found' }));
                
            } catch (error) {
                console.error('‚ùå JSON parse error:', error);
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ 
                    error: 'Invalid JSON format',
                    details: error.message 
                }));
            }
        });
        
        return;
    }
    
    // Handle GET requests
    if (method === 'GET') {
        if (url === '/api/protected') {
            const authHeader = req.headers.authorization;
            console.log('üîê Auth header:', authHeader);
            
            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                res.writeHead(401, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ 
                    message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –î–æ–±–∞–≤—å—Ç–µ header: Authorization: Bearer <token>' 
                }));
                return;
            }
            
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({
                message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –∑–æ–Ω—É!',
                secret: '–≠—Ç–æ –æ—á–µ–Ω—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üîê',
                user: {
                    id: 1,
                    username: 'testuser',
                    email: 'test@example.com'
                },
                timestamp: new Date().toISOString()
            }));
            return;
        }
        
        // Default GET response
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            message: 'GET request received',
            url: url,
            timestamp: new Date().toISOString()
        }));
        return;
    }
    
    // Handle other methods
    res.writeHead(405, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ 
        message: 'Method not allowed',
        allowed: ['GET', 'POST', 'OPTIONS'] 
    }));
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
    console.log('====================================');
    console.log('üöÄ HTTP –°–ï–†–í–ï–† –° –õ–û–ì–ò–†–û–í–ê–ù–òEM –ó–ê–ü–£–©–ï–ù');
    console.log('====================================');
    console.log(`üìç –ü–æ—Ä—Ç: ${PORT}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log('------------------------------------');
    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('Email: –ª—é–±–æ–π –≤–∞–ª–∏–¥–Ω—ã–π email');
    console.log('Password: –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å –æ—Ç 6 —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('====================================');
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...');
    server.close(() => {
        process.exit(0);
    });
});